package delivery;

import java.util.ArrayList;
//import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.stream.Collectors;
//import java.util.stream.Stream;


public class Delivery {
	// R1
	class Category {
		final String nome;
		Category(String n) {
			nome = n;
		}
	}
	//private Map<String, List<Restaurant>> categories = new HashMap<>();
	private Map<String, SortedSet<Restaurant>> categories = new HashMap<>();
	private Map<String, Restaurant> restaurants = new HashMap<>();
	
	List<Order> orders = new LinkedList<>();
	
    /**
     * adds one category to the list of categories managed by the service.
     * 
     * @param category name of the category
     * @throws DeliveryException if the category is already available.
     */
	public void addCategory (String category) throws DeliveryException {
		if(categories.containsKey(category)) {
			throw new DeliveryException("Categoria gia' esistente: " + category);
		}
		//categories.put(category, new LinkedList<>());
		categories.put(category, new TreeSet<>()); //ordinamento naturale
		//categories.put(category, new TreeSet<>(Comparator.comparing(Ristorante::getName)));
	}
	
	/**
	 * retrieves the list of defined categories.
	 * 
	 * @return list of category names
	 */
	public List<String> getCategories() {
		return new ArrayList<>(categories.keySet());
	}
	
	/**
	 * register a new restaurant to the service with a related category
	 * 
	 * @param name     name of the restaurant
	 * @param category category of the restaurant
	 * @throws DeliveryException if the category is not defined.
	 */
	public void addRestaurant (String name, String category) throws DeliveryException {
		if(!categories.containsKey(category)) {
			throw new DeliveryException("Categoria non definita: " + category);
		}
		Restaurant r = new Restaurant(name, category);
		restaurants.put(name, r);
		categories.get(category).add(r);
	}
	
	/**
	 * retrieves an ordered list by name of the restaurants of a given category. 
	 * It returns an empty list in there are no restaurants in the selected category 
	 * or the category does not exist.
	 * 
	 * @param category name of the category
	 * @return sorted list of restaurant names
	 */
	public List<String> getRestaurantsForCategory(String category) {
        return categories.get(category).stream() //prendo una lista di ristoranti
        		.map(Restaurant::getName) 		 //ricavo il nome da questi ristoranti
    //    		.sorted()						 //li ordino naturalmente
        		.collect(Collectors.toList());	 //trasformo in una lista
	}
	
	// R2
	
	/**
	 * adds a dish to the list of dishes of a restaurant. 
	 * Every dish has a given price.
	 * 
	 * @param name             name of the dish
	 * @param restaurantName   name of the restaurant
	 * @param price            price of the dish
	 * @throws DeliveryException if the dish name already exists
	 */
	public void addDish(String name, String restaurantName, float price) throws DeliveryException {
		Restaurant r = restaurants.get(restaurantName);
		r.addDish(name, price);
	}
	
	/**
	 * returns a map associating the name of each restaurant with the 
	 * list of dish names whose price is in the provided range of price (limits included). 
	 * If the restaurant has no dishes in the range, it does not appear in the map.
	 * 
	 * @param minPrice  minimum price (included)
	 * @param maxPrice  maximum price (included)
	 * @return map restaurant -> dishes
	 */
	public Map<String,List<String>> getDishesByPrice(float minPrice, float maxPrice) {
        return restaurants.values().stream()
        		.filter(r -> r.dishesInRange(minPrice, maxPrice).size() > 0)
        		.collect(Collectors.toMap(
        						r -> r.getName(), 
        						r -> r.dishesInRange(minPrice, maxPrice))
        				);
        //OR
//		return restaurants.values().stream()
//				.filter(r -> r.getDishes().stream()
//						.filter(p -> p.inRange(minPrice, maxPrice)).count() > 0)
//				.collect(Collectors.toMap(
//								Restaurant::getName, 
//								r -> r.getDishes().stream()
//										.filter(p -> p.inRange(minPrice, maxPrice))
//										.map(Dish::getName)
//										.collect(Collectors.toList())	
//						));
	}
	
	/**
	 * retrieve the ordered list of the names of dishes sold by a restaurant. 
	 * If the restaurant does not exist or does not sell any dishes 
	 * the method must return an empty list.
	 *  
	 * @param restaurantName   name of the restaurant
	 * @return alphabetically sorted list of dish names 
	 */
	public List<String> getDishesForRestaurant(String restaurantName) {
		Restaurant r = restaurants.get(restaurantName);
		if(r == null) return new LinkedList<>();
//        List<String> dishes = r.dishesInRange(0, Float.MAX_VALUE);
//        Collections.sort(dishes);
//        return dishes;
		//OR
		return r.getDishes().stream()
				.map(Dish::getName)
				.sorted()
				.collect(Collectors.toList());
	}
	
	/**
	 * retrieves the list of all dishes sold by all restaurants belonging to the given category. 
	 * If the category is not defined or there are no dishes in the category 
	 * the method must return and empty list.
	 *  
	 * @param category     the category
	 * @return 
	 */
	public List<String> getDishesByCategory(String category) {
        return categories.get(category).stream()		//Mi da' uno stream di ristoranti di quella categoria.
        		.flatMap(r -> r.getDishes().stream())	//Mi espande e per ogni ristorante di quella categoria mi tira fuori i piatti, quindi ho tutti i piatti di tutti i ristoranti di quella categoria.
        		.map(Dish::getName)						//Dallo stream di piatti mi tira fuori lo stream di stringhe.
        		.collect(Collectors.toList())			//Raccolgo in una lista.
        		;
	}
	
	//R3
	
	/**
	 * creates a delivery order. 
	 * Each order may contain more than one product with the related quantity. 
	 * The delivery time is indicated with a number in the range 8 to 23. 
	 * The delivery distance is expressed in kilometers. 
	 * Each order is assigned a progressive order ID, the first order has number 1.
	 * 
	 * @param dishNames        names of the dishes
	 * @param quantities       relative quantity of dishes
	 * @param customerName     name of the customer
	 * @param restaurantName   name of the restaurant
	 * @param deliveryTime     time of delivery (8-23)
	 * @param deliveryDistance distance of delivery
	 * 
	 * @return order ID
	 */
	public int addOrder(String dishNames[], int quantities[], String customerName, String restaurantName, int deliveryTime, int deliveryDistance) {
	    Restaurant r = restaurants.get(restaurantName);
	    
	    Order o = new Order(orders.size()+1, dishNames, quantities, customerName, r, deliveryTime, deliveryDistance);
		orders.add(o);
		return o.getCode();
	}
	
	/**
	 * retrieves the IDs of the orders that satisfy the given constraints.
	 * Only the  first {@code maxOrders} (according to the orders arrival time) are returned
	 * they must be scheduled to be delivered at {@code deliveryTime} 
	 * whose {@code deliveryDistance} is lower or equal that {@code maxDistance}. 
	 * Once returned by the method the orders must be marked as assigned 
	 * so that they will not be considered if the method is called again. 
	 * The method returns an empty list if there are no orders (not yet assigned) 
	 * that meet the requirements.
	 * 
	 * @param deliveryTime required time of delivery 
	 * @param maxDistance  maximum delivery distance
	 * @param maxOrders    maximum number of orders to retrieve
	 * @return list of order IDs
	 */
	public List<Integer> scheduleDelivery(int deliveryTime, int maxDistance, int maxOrders) {
        return orders.stream()
        		.filter(o -> !o.assigned() && o.getDeliveryTime() == deliveryTime && o.getDistance() <= maxDistance)
        		.limit(maxOrders)
        		.peek(o -> o.setAssigned())
        		.map(Order::getCode)
        		.collect(Collectors.toList())
        		;
        //OR
//        List<Order> result = orders.stream()
//        						.filter(o -> !o.assigned() && o.getDeliveryTime() == deliveryTime && o.getDistance() <= maxDistance)
//        						.limit(maxOrders)
//        						.collect(Collectors.toList());
//        result.forEach(o -> o.setAssigned());
//        return result.stream()
//        		.map(Order::getCode)
//        		.collect(Collectors.toList());
	}
	
	/**
	 * retrieves the number of orders that still need to be assigned
	 * @return the unassigned orders count
	 */
	public int getPendingOrders() {
        return (int)orders.stream()
        		.filter(o -> !o.assigned())
        		.count();
	}
	
	// R4
	/**
	 * records a rating (a number between 0 and 5) of a restaurant.
	 * Ratings outside the valid range are discarded.
	 * 
	 * @param restaurantName   name of the restaurant
	 * @param rating           rating
	 */
	public void setRatingForRestaurant(String restaurantName, int rating) {
		Restaurant r = restaurants.get(restaurantName);
		r.addRating(rating);
	}
	
	/**
	 * retrieves the ordered list of restaurant. 
	 * 
	 * The restaurant must be ordered by decreasing average rating. 
	 * The average rating of a restaurant is the sum of all rating divided by the number of ratings.
	 * 
	 * Se il ristorante non ha ricevuto alcuna valutazione non compare nella lista.
	 * 
	 * @return ordered list of restaurant names
	 */
	public List<String> restaurantsAverageRating() {
        return restaurants.values().stream()
        		.filter(r -> r.ratingAverage() >= 0)
        		.sorted(Comparator.comparing(Restaurant::ratingAverage).reversed())
        		.map(Restaurant::getName)
        		.collect(Collectors.toList())
        		;
	}
	
	//R5
	/**
	 * returns a map associating each category to the number of orders placed to any restaurant in that category. 
	 * Also categories whose restaurants have not received any order must be included in the result.
	 * 
	 * @return map category -> order count
	 */
	public Map<String,Long> ordersPerCategory() {
		Map<String,Long> result = orders.stream()
        		.collect(Collectors.groupingBy(
        					Order::getCategory,
        					Collectors.counting()
        		));
		categories.keySet().forEach(c -> result.putIfAbsent(c, 0L));
		return result;
	}
	
	/**
	 * retrieves the name of the restaurant that has received the higher average rating.
	 * 
	 * @return restaurant name
	 */
	public String bestRestaurant() {
        return restaurants.values().stream()
        .max(Comparator.comparingDouble(Restaurant::ratingAverage))
        .get().getName();
	}
}
